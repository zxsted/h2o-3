//
// H2O Core Module
//
description = "H2O Core"

dependencies {
  // Dependency on shared model support
  compile project (':h2o-genmodel')
  // Required for h2o-core
  compile "joda-time:joda-time:2.3"
  compile "gov.nist.math:jama:1.0.3"
  compile "org.apache.commons:commons-math3:3.3"
  compile "org.apache.directory.studio:org.apache.commons.lang:2.6"
  compile "ai.h2o:google-analytics-java:1.1.2-H2O-CUSTOM"
  compile "org.eclipse.jetty:jetty-servlet:9.2.11.v20150529"
  compile "org.eclipse.jetty:jetty-jaas:9.2.11.v20150529"
  // For Java6 we need named groups in regexp to have nice user API
  compile "com.github.tony19:named-regexp:0.2.3"

  compile("log4j:log4j:1.2.15") { 
    exclude module: "activation" 
    exclude module: "jms" 
    exclude module: "jmxri" 
    exclude module: "jmxtools" 
    exclude module: "mail" 
  }

  // guava only needed by hadoop now, not by H2O
  compile 'com.google.guava:guava:16.0.1'
  compile 'commons-logging:commons-logging:1.1.1'
  compile 'commons-collections:commons-collections:3.0'
  compile 'org.javassist:javassist:3.18.2-GA'

  compile "org.reflections:reflections:0.9.9"

  // Jets3t is required by S3N support
  compile 'net.java.dev.jets3t:jets3t:0.6.1'

  testCompile "junit:junit:${junitVersion}"
}

apply from: '../gradle/dataCheck.gradle'

javadoc {
  exclude "**/fvec/C*Chunk.java/**"
  exclude "**/nbhm/**"
}

jar {
  manifest {
    attributes 'Main-Class': 'water.H2O'
  }
}

// The default 'test' behavior is broken in that it does not grok clusters.
// For H2O, all tests need to be run on a cluster, where each JVM is
// "free-running" - it's stdout/stderr are NOT hooked by another process.  If
// they are hooked (e.g., by the gradle driver process) then the stdout/err get
// buffered and when all CPUs are maxed out (happens over a large fraction of
// the test run) no output is visible.  If the JVMs then crash (again, common
// enough), we get NO output for the test run.  So instead we need to arrange a
// complete cluster of free-running JVMs and redirect all output (at the OS
// level) to files - then scrape the files later for test results.
test {
  dependsOn smalldataCheck, cpLibs, testMultiNode, testJar

  // Defeat task 'test' by running no tests.
  exclude '**'
}

def buildVersionFile = new File(projectDir, "/src/main/java/water/init/BuildVersion.java");

task generateBuildVersionJava << {
  H2OBuildVersion bv = new H2OBuildVersion(rootDir, version);
  bv.emitBuildVersionJavaFileIfNecessary(buildVersionFile);
}

compileJava.dependsOn generateBuildVersionJava

task cleanBuildVersionJava(type: Delete) {
    delete buildVersionFile
}

clean.dependsOn cleanBuildVersionJava

apply from: '../gradle/javaIgnoreSymbolFile.gradle'
